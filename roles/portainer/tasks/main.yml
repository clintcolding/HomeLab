---
- name: create portainer network
  docker_network:
    name: portainer_agent_network
    driver: overlay
    attachable: yes

- name: create portainer volume
  docker_volume:
    name: portainer-data

- name: create portainer agent service
  docker_swarm_service:
    name: portainer_agent
    image: portainer/agent
    networks:
      - portainer_agent_network
    mode: global
    mounts:
      - source: //var/run/docker.sock
        target: /var/run/docker.sock
        type: bind
      - source: //var/lib/docker/volumes
        target: /var/lib/docker/volumes
        type: bind
    labels:
      traefik.enable: "false"
  when: role is defined and role == "leader"

- name: create portainer management service
  docker_swarm_service:
    name: portainer
    image: portainer/portainer
    replicas: 1
    command: /portainer -H tcp://tasks.portainer_agent:9001 --tlsskipverify
    networks:
      - traefik
      - portainer_agent_network
    placement:
      constraints:
        - node.hostname == rpi01
    mounts:
      - source: portainer-data
        target: /data
        type: volume
    labels:
      #---- 80 Entry ----#
      traefik.http.routers.portainer_web.rule: "Host(`portainer.clintcolding.com`)"
      traefik.http.routers.portainer_web.entrypoints: "web"
      traefik.http.routers.portainer_web.middlewares: "portainer_redirect"
      #---- Create the middleware "portainer_redirect" used on 80 entry ----#
      traefik.http.middlewares.portainer_redirect.redirectscheme.scheme: "https"
      #---- 443 Entry ----#
      traefik.http.routers.portainer_websecure.rule: "Host(`portainer.clintcolding.com`)"
      traefik.http.routers.portainer_websecure.entrypoints: "websecure"
      #---- Expose port 3000 ----#
      traefik.http.services.portainer-service.loadbalancer.server.port: "9000"
      #---- ACME config for websecure router ----#
      traefik.http.routers.portainer_websecure.tls.certresolver: "httpchallenge"
  when: role is defined and role == "leader"